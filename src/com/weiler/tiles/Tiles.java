package com.weiler.tiles;

import static com.codename1.ui.CN.*;

import com.codename1.components.*;
import com.codename1.io.*;

import java.io.ByteArrayInputStream;
import java.util.*;

import com.codename1.maps.Coord;
import com.codename1.processing.Result;
import com.codename1.social.LoginCallback;
import com.codename1.ui.*;
import com.codename1.ui.ButtonGroup;
import com.codename1.ui.animations.ComponentAnimation;
import com.codename1.ui.animations.CommonTransitions;
import com.codename1.ui.layouts.*;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.list.DefaultListModel;
import com.codename1.ui.plaf.*;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.spinner.Picker;
import com.codename1.ui.table.TableLayout;
import com.codename1.ui.List;
import com.codename1.ui.util.Resources;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;

import com.codename1.util.StringUtil;


import com.codename1.social.GoogleConnect;
import com.cloudinary.Cloudinary;
import com.cloudinary.utils.ObjectUtils;
import com.codename1.capture.Capture;
import com.codename1.social.Login;
import com.codename1.googlemaps.MapContainer;

import javax.swing.*;


/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class Tiles {

    private Form current;
    private Resources theme;
    private static String tokenPrefix="google";
    public ArrayList<Style> tileUnselectedStyle = new ArrayList<>();
    private Image milton;
    private String fullName;
    private String uniqueId;
    private String getEmail;
    private boolean isResponsesPressed = false;
    private String imageURL;
    private Form createEvent;
    public Cloudinary cloudinary;
    public int displayWidth;
    public int displayHeight;
    private String HTML_API_KEY = "AIzaSyCZh3V0mS5yioBLG5_SnpaAc3XjJOj2ioI";
    private final String[] finalAddress = {""};
    private Coord coordinates = new Coord(0,0);
    private String formattedLng = "";
    private Style toolbarStyle = new Style();
    private String formattedLat = "";
    private DataBaseHelper globalBase = new DataBaseHelper();
    private Map<String, String> eventParams = new HashMap<String, String>();
    private String globalFilePath;
    private Image globalImage = null;
    public static final String USER_AGENT = "Mozilla/5.0 Google";





    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");
       // Toolbar.setOnTopSideMenu(true);


        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        BrowserComponent browserComponent = new BrowserComponent();

        browserComponent.setProperty("useragent", "Mozilla/5.0 Google");
        System.out.println("USERAGENT IS " + browserComponent.getPropertyValue("useragent"));


        //INITIALIZATION
       // fullName = Preferences.get("fullName", null);
       //uniqueId = Preferences.get("uniqueId", null);
       // imageURL = Preferences.get("imageURL", null);

        fullName = globalBase.getUserByID("114670128593389003041").get(0).get("Name").toString();
        uniqueId = globalBase.getUserByID("114670128593389003041").get(0).get("Id").toString();
        getEmail = "jaweiler5454@gmail.com";
        imageURL = globalBase.getUserByID("114670128593389003041").get(0).get("ImageURL").toString();

        //CLOUDINARY INIT
        cloudinary = new Cloudinary(ObjectUtils.asMap(
                "cloud_name", "tiles",
                "api_key", "817285289173163",
                "api_secret", "H9YMuHi-ZYdtLAMfyXpfbQFZ4OI"));

        // Disable private CDN URLs as this doesn't seem to work with free accounts
        cloudinary.config.privateCdn = false;

        displayWidth = Display.getInstance().getDisplayWidth();
        displayHeight = Display.getInstance().getDisplayHeight();


    }
    
    public void start() {
        if (current != null) {
            current.show();
            return;
        }


        toolbarStyle.setBgColor(0x9300FF);
        toolbarStyle.setMargin(0,0,0,0);
        //hi.show();
       showLoginForm();
       //tileForm().show();



    }

    private void showLoginForm() {
        Form loginForm = new Form(new BorderLayout());
        Container containerForm = new Container();
        containerForm.setLayout(new BorderLayout());

        Style loginStyle = new Style();
        loginStyle.setBgColor(0x9300FF);
        loginStyle.setPaddingBottom(15);
        loginStyle.setPaddingRight(10);
        loginStyle.setPaddingLeft(10);
        loginStyle.setMargin(0,0,0,0);
        containerForm.setWidth(displayWidth);
        containerForm.setHeight(displayHeight);
        containerForm.setUnselectedStyle(loginStyle);
        containerForm.setSelectedStyle(loginStyle);
        loginForm.getToolbar().hideToolbar();
        loginForm.getToolbar().setUIID("Container");
        loginForm.setUnselectedStyle(loginStyle);



        Label titleLabel = new Label("Tiles");
        Style labelStyle = new Style();
        //labelStyle.setFont(ballpark1);
        labelStyle.setFgColor(0xffffff);
        labelStyle.setBgColor(0x9300FF);
        titleLabel.setUnselectedStyle(labelStyle);



        Button loginWithGoogle = new Button("Sign in with Google");
        loginWithGoogle.setUIID("LoginButtonGoogle");
        Image img = globalBase.getImage("http://res.cloudinary.com/tiles/image/upload/v1527606662/sign-in-with-google.png", 1,1);
        Style buttonStyle = new Style();
        buttonStyle.setBgImage(img);
        loginWithGoogle.setUnselectedStyle(buttonStyle);
        loginWithGoogle.setSelectedStyle(buttonStyle);
        loginWithGoogle.setPressedStyle(buttonStyle);
        loginWithGoogle.addActionListener((e) -> {
            tokenPrefix = "google";
            Login gc = GoogleConnect.getInstance();
            gc.setClientId("1063668062883-etbppkvqrepcavge8043lpqhhm1bs4bi.apps.googleusercontent.com");
            gc.setRedirectURI("http://www.codenameone.com/oauth2callback");
            gc.setClientSecret("iq6W5bQ8K6gYmpLwlNyutwuF");
           /* gc.setCallback(new LoginCallback() {
                public void loginSuccessful() {
                }

                public void loginFailed(String errorMessage) {System.out.println("THIS REALLY DIDN't WORK" + errorMessage);}
            });

            if(!gc.isUserLoggedIn()){
                gc.doLogin();
            }else{
                String token = gc.getAccessToken().getToken();
                createEvent.show();
            }*/
            doLogin(gc, new GoogleData(), false);
        });

        loginForm.add(BorderLayout.CENTER, titleLabel).add(BorderLayout.SOUTH, loginWithGoogle);
  //      loginForm.add(BorderLayout.CENTER, containerForm);
        loginForm.show();
    }



    public Form addTile()
    {
        TextModeLayout textModeLayout = new TextModeLayout(6,1);
        Form helloForm = new Form("Add an Event", textModeLayout);



        TextComponent title = new TextComponent().label("Title");
        TextComponent organization = new TextComponent().label("Organization");
        TextComponent description = new TextComponent().label("Description").multiline(true);
        PickerComponent dateComponent = PickerComponent.createDate(new Date()).label("Date");
        PickerComponent timeComponent = PickerComponent.createTime(0).label("Time");
        Container forAc = new Container();


        final DefaultListModel<String> options = new DefaultListModel<>();
        AutoCompleteTextField ac = new AutoCompleteTextField(options) {
            @Override
            protected boolean filter(String text) {
                if (text.length() == 0) {
                    return false;
                }

                String[] l = searchLocations(text);
                if (l == null || l.length == 0) {
                    return false;
                }

                options.removeAll();
                for (String s : l) {
                    options.addItem(s);
                }
                return true;
            }

        };


        ac.setMinimumElementsShownInPopup(5);
        Style so = UIManager.getInstance().getComponentStyle("TitleCommand");
        FontImage icon = FontImage.createMaterial(FontImage.MATERIAL_SEARCH, so);
        String getAddress = new String();
        getAddress = ac.getText();
        System.out.println(getAddress);
        forAc.add(new Label("Location")).add(ac);

        helloForm.getToolbar().addMaterialCommandToRightBar("", FontImage.MATERIAL_ARROW_FORWARD, e->{
            System.out.println("hello");
            DataBaseHelper base = new DataBaseHelper();

            finalAddress[0] = ac.getText();
            final String finalAddressTrue = finalAddress[0];
            coordinates = geocode(finalAddressTrue);
            System.out.println(coordinates);
            Double lng = coordinates.getLongitude();
            Double lat = coordinates.getLatitude();
            formattedLng = lng.toString();
            formattedLat = lat.toString();

            eventParams.put("eventID", standIDGenerator());
            eventParams.put("title", title.getText());
            eventParams.put("latitude", formattedLat);
            eventParams.put("longitude", formattedLng);
            eventParams.put("location", finalAddressTrue);
            eventParams.put("description", description.getText());
            eventParams.put("userPosted", uniqueId);
            eventParams.put("responses", "0");
            eventParams.put("schoolID", "milton_academy");
            //params.put("imageURL", "milton.edu");
            eventParams.put("date", dateComponent.getPicker().getText());
            eventParams.put("time", timeComponent.getPicker().getText());
            eventParams.put("organization", organization.getText());
            imageCreation().show();
        });

        helloForm.getToolbar().addMaterialCommandToSideMenu("Home", FontImage.MATERIAL_HOME, e -> {
            tileForm().show();});
        helloForm.getToolbar().addMaterialCommandToSideMenu("Create", FontImage.MATERIAL_PLUS_ONE, e -> {
           helloForm.show();});
        helloForm.getToolbar().addMaterialCommandToSideMenu("Settings", FontImage.MATERIAL_SETTINGS, e -> {showSettings();});
        helloForm.getToolbar().addMaterialCommandToSideMenu("My Profile", FontImage.MATERIAL_PERSON, e -> {profileForm().show();});
        helloForm.getToolbar().setUnselectedStyle(toolbarStyle);

        helloForm.add(title).add(organization).add(dateComponent).add(timeComponent).add(description).add(forAc);

        return helloForm;

    }

    public void showSettings()
    {
        Form settingsForm = new Form("Settings");
        Button logoutButton = new Button("Logout");
        logoutButton.setUIID("LoginButtonGoogle");
        Button cancel = new Button("Cancel");
        Button reallyDoLogout = new Button("Logout");

        settingsForm.getToolbar().addMaterialCommandToSideMenu("Home", FontImage.MATERIAL_HOME, e -> {
            tileForm().show();});
        settingsForm.getToolbar().addMaterialCommandToSideMenu("Create", FontImage.MATERIAL_PLUS_ONE, e -> {
            addTile().show();});
        settingsForm.getToolbar().addMaterialCommandToSideMenu("Settings", FontImage.MATERIAL_SETTINGS, e -> {showSettings();});
        settingsForm.getToolbar().addMaterialCommandToSideMenu("My Profile", FontImage.MATERIAL_PERSON, e -> {profileForm().show();});
        settingsForm.getToolbar().setUnselectedStyle(toolbarStyle);


        Login lg = GoogleConnect.getInstance();
        Dialog dlg = new Dialog("Do you really wish to logout?");
        dlg.setLayout(new BoxLayout(BoxLayout.X_AXIS));
        cancel.addActionListener(evt -> {dlg.dispose();});
        dlg.add(cancel);
        reallyDoLogout.addActionListener(e->{


            uniqueId = "0";
            fullName = "0";
            imageURL = "0";
            Preferences.set(tokenPrefix + "token", null);
            showLoginForm();


        });
        dlg.add(reallyDoLogout);
        logoutButton.addActionListener(evt->{
            dlg.show();
        });
        settingsForm.add(logoutButton);
        settingsForm.show();
    }


    public Form imageCreation()
    {
        System.out.println(eventParams.get("imageURL"));
        Form imageForm = new Form("Choose an Image" , new BorderLayout());
        Image bgImage = globalBase.getImage("http://res.cloudinary.com/tiles/image/upload/v1527706265/upload.png", displayWidth, displayHeight/2);
        Label imageLabel = new Label(bgImage);
        imageForm.getToolbar().setUnselectedStyle(toolbarStyle);
        imageForm.getToolbar().addMaterialCommandToLeftBar("", FontImage.MATERIAL_ARROW_BACK, evt -> {
            addTile().show();
        });

        FloatingActionButton browserButton = FloatingActionButton.createFAB(FontImage.MATERIAL_ADD_A_PHOTO);
        browserButton.createSubFAB(FontImage.MATERIAL_CAMERA, "").addActionListener(e->{
            String filePath = Capture.capturePhoto();
            if(filePath != null) {
                try {
                    Image img = Image.createImage(filePath);

                } catch(IOException err) {
                    Log.e(err);
                }
            }
        });
        browserButton.createSubFAB(FontImage.MATERIAL_SEARCH, "").addActionListener(e->{
            Display.getInstance().openGallery(event ->{
                if (event != null && event.getSource() != null) {
                    String filePath = (String) event.getSource();
                    globalFilePath = filePath;
                    int fileNameIndex = filePath.lastIndexOf("/") + 1;
                    String fileName = filePath.substring(fileNameIndex);
                    Image img = null;
                    try {
                        img = Image.createImage(FileSystemStorage.getInstance().openInputStream(filePath));
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                    globalImage = img;
                    ImageViewer iv = new ImageViewer(img);
                    imageForm.replace(imageLabel, iv, null);

                    // Do something, add to List
                }

            }, Display.GALLERY_IMAGE);
        });


        Button selectImage = new Button("Done");
        selectImage.addActionListener(evt -> {
            Dialog ip = new InfiniteProgress().showInifiniteBlocking();
            eventParams.put("imageURL", globalBase.uploadImage(globalFilePath).get("url").toString());
            globalImage = globalBase.getImage(eventParams.get("imageURL"), 1, 1);
            globalBase.addPost(eventParams);
            Map<String, Object> userData = globalBase.getUserByID(uniqueId).get(0);
            String userEvents = userData.get("Events").toString();
            String updatedUserEvents = userEvents.concat(eventParams.get("eventID") + ", ");
            globalBase.updateEvents(uniqueId, updatedUserEvents);
            ip.dispose();
            viewEvent(eventParams.get("eventID")).show();

        });
        imageForm.add(BorderLayout.CENTER, imageLabel);
        imageForm.add(BorderLayout.SOUTH, selectImage);
        browserButton.bindFabToContainer(imageForm.getContentPane());





        return imageForm;
    }

    public Form viewEvent(String identifier)
    {


        System.out.println("HELLO");
        ArrayList<Map<String, Object>> event = globalBase.getEventById(identifier);
        Map<String, Object> event1 = event.get(0);
        ArrayList<Map<String, Object>> userDatas = globalBase.getUserByID(uniqueId);
        Map<String, Object>  userDatas1 = userDatas.get(0);


        Form viewEventForm = new Form(new BoxLayout(BoxLayout.Y_AXIS));
        viewEventForm.setScrollableY(true);
        viewEventForm.setTitle(event1.get("Title").toString());
        Image image = globalBase.getImage(event1.get("ImageURL").toString(), viewEventForm.getWidth(), viewEventForm.getWidth());
        viewEventForm.setScrollable(false);

        //stitle.setBgImage(image);
        Label imageLabel = new Label(image);
        imageLabel.setWidth(displayWidth);


        Button location = new Button(event1.get("Location").toString());
        location.setUIID("Label");
        Style organizationStyle = new Style();
        Label organization = new Label(event1.get("Organization").toString());
        organization.setUnselectedStyle(organizationStyle);


        Label dateTime = new Label(event1.get("Date").toString()+ " " + event1.get("Time").toString());
        SpanLabel description = new SpanLabel(event1.get("Description").toString());

        FloatingActionButton checkFab = FloatingActionButton.createFAB(FontImage.MATERIAL_CHECK);
        FloatingActionButton fab = FloatingActionButton.createFAB(FontImage.MATERIAL_THUMB_UP);


        checkFab.addActionListener(e->{


            checkFab.remove();
            fab.bindFabToContainer(viewEventForm.getContentPane());
            String responsesString = event1.get("Responses").toString();
            int responseInt = Integer.parseInt(responsesString);
            responseInt -= 1;
            String resultResponses = Integer.toString(responseInt);
            String resultResponseIds = userDatas1.get("EventsGoing").toString();
            String updatedEventsGoing = resultResponseIds.replace(identifier + ",", "");
            globalBase.updateEventsGoing(uniqueId, updatedEventsGoing);
            globalBase.updateResponses(identifier, resultResponses);

        });

        fab.addActionListener(evt->{

                fab.remove();
                checkFab.bindFabToContainer(viewEventForm.getContentPane());
                String responsesString = event1.get("Responses").toString();
                int responseInt = Integer.parseInt(responsesString);
                responseInt += 1;
                String resultResponses = Integer.toString(responseInt);
                String resultResponseIds = userDatas1.get("EventsGoing").toString();
                String updatedEventsGoing = resultResponseIds.concat(identifier).concat(", ");
                globalBase.updateEventsGoing(uniqueId, updatedEventsGoing);
                globalBase.updateResponses(identifier, resultResponses);


        });


      //  fab.bindFabToContainer(imageLabel);



        viewEventForm.getToolbar().setUnselectedStyle(toolbarStyle);
        viewEventForm.getToolbar().addMaterialCommandToSideMenu("Home", FontImage.MATERIAL_HOME, e -> {
            tileForm().show();});
        viewEventForm.getToolbar().addMaterialCommandToSideMenu("Create", FontImage.MATERIAL_PLUS_ONE, e -> {
            addTile().show();});
        viewEventForm.getToolbar().addMaterialCommandToSideMenu("Settings", FontImage.MATERIAL_SETTINGS, e -> {});
        viewEventForm.getToolbar().addMaterialCommandToSideMenu("My Profile", FontImage.MATERIAL_PERSON, e -> {});

        ComponentAnimation title = viewEventForm.getToolbar().createStyleAnimation("Container", 200);
        viewEventForm.getAnimationManager().onTitleScrollAnimation(title);

        viewEventForm.addPullToRefresh(() -> {

            viewEventForm.setTitle(globalBase.getEventById(identifier).get(0).get("Title").toString());
            viewEventForm.setScrollable(false);

            //stitle.setBgImage(image);
            imageLabel.setIcon(globalBase.getImage(event1.get("ImageURL").toString(), viewEventForm.getWidth(), viewEventForm.getWidth()));
            imageLabel.setWidth(displayWidth);


            location.setText(globalBase.getEventById(identifier).get(0).get("Location").toString());
            organization.setText(globalBase.getEventById(identifier).get(0).get("Organization").toString());


            dateTime.setText(globalBase.getEventById(identifier).get(0).get("Date").toString()+ " " + globalBase.getEventById(identifier).get(0).get("Time").toString());
            description.setText(globalBase.getEventById(identifier).get(0).get("Description").toString());

        });

        Form mapForm = new Form(location.getText());
        final MapContainer cnt = new MapContainer(HTML_API_KEY);
        mapForm.getToolbar().addMaterialCommandToLeftBar("", FontImage.MATERIAL_ARROW_BACK, evt -> {viewEventForm.show();});

        Style s = new Style();
        s.setFgColor(0xff0000);
        FontImage markerImg = FontImage.createMaterial(FontImage.MATERIAL_PLACE, s, Display.getInstance().convertToPixels(3));
        FontImage placesDirect = FontImage.createMaterial(FontImage.MATERIAL_ARROW_FORWARD, s);
        double dlat = Double.parseDouble(event1.get("Latitude").toString());
        double dlong = Double.parseDouble(event1.get("Longitude").toString());
        Coord coordinates = new Coord(dlat, dlong);

        cnt.setCameraPosition(coordinates);
        cnt.addMarker(EncodedImage.createFromImage(markerImg, false), coordinates, event1.get("Title").toString(), "", e-> {});

        mapForm.add(cnt);
        location.addActionListener(evt->{
            mapForm.show();
        });


        viewEventForm.add(organization).add(location).add(imageLabel).add(dateTime).add(description);
        if(userDatas1.get("EventsGoing").toString().contains(identifier)){
            checkFab.bindFabToContainer(viewEventForm.getContentPane());
        }
        else{
            fab.bindFabToContainer(viewEventForm.getContentPane());
        }



        return viewEventForm;
    }
    // HERE IS THE ID GENERATOR METHODS

    final String charList = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890";
    final int idLength = 10;

    private int getRandomNumber() {
        int randomInt = 0;
        Random randomGenerator = new Random();
        randomInt = randomGenerator.nextInt(charList.length());
        if (randomInt - 1 == -1) {
            return randomInt;
        } else {
            return randomInt - 1;
        }
    }


    public String standIDGenerator()
    {
        StringBuffer randStr = new StringBuffer();
        for(int i=0; i<idLength; i++){
            int number = getRandomNumber();
            char ch = charList.charAt(number);
            randStr.append(ch);
        }

        return randStr.toString();
    }



    boolean checkID(String prelimID)
    {
        ArrayList basedIds = new ArrayList();
        for(int i=0; i<globalBase.getPosts("milton_academy").size(); i++) {
            basedIds.add(globalBase.getPosts("milton_academy").get(i).get("EventID").toString());
        }

        if(basedIds.contains(prelimID))
        {
            return false;
        }

        else
        {
            return true;
        }

    }




    /// GEOCODING PROCEDURES BELOW
    public String[] searchLocations(String input) {
        try {
            if(input.length() > 0) {
                ConnectionRequest r = new ConnectionRequest();
                r.setPost(false);
                r.setUrl("https://maps.googleapis.com/maps/api/place/autocomplete/json");
                r.addArgument("key", HTML_API_KEY);
                r.addArgument("input", input);
                NetworkManager.getInstance().addToQueueAndWait(r);
                Map<String,Object> result = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(r.getResponseData()), "UTF-8"));
                String[] res = Result.fromContent(result).getAsStringArray("//description");
                return res;
            }
        } catch(Exception err) {
            Log.e(err);
        }
        return null;
    }

    public Coord geocode(String fullAddress){
        String text="";
        Coord ret = null;
        try {
            final String link = "https://maps.googleapis.com/maps/api/geocode/json";
            // URL url = new URL(link + "?address=" + URLEncoder.encode(fullAddress, "UTF-8")+ "&sensor=false");
            // Open the Connection
            ConnectionRequest req = new ConnectionRequest();
            req.setPost(false);
            req.setUrl(link);
            req.addArgument("address", fullAddress);
            req.addArgument("key", HTML_API_KEY);


            //https://gist.github.com/ahmedengu/0869b8c0644eee0d57d3891bc51a00dc
            NetworkManager.getInstance().addToQueueAndWait(req);
            Map<String, Object> response = new JSONParser().parseJSON(new InputStreamReader(new ByteArrayInputStream(req.getResponseData()), "UTF-8"));
            if (response.get("results") != null) {
                ArrayList results = (ArrayList) response.get("results");
                if (results.size() > 0) {
                    LinkedHashMap location = (LinkedHashMap) ((LinkedHashMap) ((LinkedHashMap) results.get(0)).get("geometry")).get("location");
                    ret = new Coord((double) location.get("lat"), (double) location.get("lng"));



                }
            }
            return ret;

        }
        catch(Exception ex){
            Log.e(ex);
        }

        return null;

    }

    public Form tileForm()
    {
        TableLayout tl = new TableLayout( 4, 2);
        Form formReturned = new Form("Tiles",tl);
        formReturned.setToolbar(new Toolbar());
        Style toolbarStyle = new Style();
        toolbarStyle.setBgColor(0x9300FF);
        toolbarStyle.setMargin(0,0,0,0);
        formReturned.getToolbar().setUnselectedStyle(toolbarStyle);


        Style stitle = new Style();
        Label titleLabel = new Label("Tiles");
        formReturned.getToolbar().setTitleComponent(titleLabel);
        //
        //
        //
        //stitle.setFont(ballpark);
        stitle.setPaddingLeft(15);
        stitle.setPaddingRight(15);
        stitle.setBgColor(0x9300FF);
        stitle.setFgColor(0xFFFFFF);
        titleLabel.setUnselectedStyle(stitle);
        formReturned.setScrollable(true);
        // formReturned.getToolbar().setOnTopSideMenu(true);


        formReturned.getToolbar().addMaterialCommandToSideMenu("Home", FontImage.MATERIAL_HOME, e -> {
            formReturned.show();});
        formReturned.getToolbar().addMaterialCommandToSideMenu("Create", FontImage.MATERIAL_PLUS_ONE, e -> {
        addTile().show();});
        formReturned.getToolbar().addMaterialCommandToSideMenu("Settings", FontImage.MATERIAL_SETTINGS, e -> {showSettings();});
        formReturned.getToolbar().addMaterialCommandToSideMenu("My Profile", FontImage.MATERIAL_PERSON, e -> {profileForm().show();});
        formReturned.getToolbar().setUnselectedStyle(toolbarStyle);


        Container topBar = new Container();



        ArrayList<Map<String,Object>> tilesByOrg = globalBase.getPosts("milton_academy");
        ArrayList<Image> imagesArray= new ArrayList<Image>();
        ArrayList<Button> tilesButtons = new ArrayList<Button>();

        for(int i=0; i<tilesByOrg.size(); i++)
        {
            tileUnselectedStyle.add(new Style());
            imagesArray.add(globalBase.getImage(tilesByOrg.get(i).get("ImageURL").toString(), 100, 100));
            tilesButtons.add(new Button(tilesByOrg.get(i).get("Title").toString()));
        }
        for(int i=0; i<tilesButtons.size(); i++) {

            tileUnselectedStyle.get(i).setBgImage(imagesArray.get(i));
            tileUnselectedStyle.get(i).setBorder(RoundRectBorder.create());
            tileUnselectedStyle.get(i).setMargin(1,1,1,1);
            tilesButtons.get(i).setUnselectedStyle(tileUnselectedStyle.get(i));
            String eventID = tilesByOrg.get(i).get("EventID").toString();
            tilesButtons.get(i).addActionListener(evt->{
                viewEvent(eventID).show();
            });

        }

        for(int i=tilesByOrg.size()-1; i>0; i--) {
            formReturned.add(tl.createConstraint().widthPercentage(50).heightPercentage(10), tilesButtons.get(i));
        }


        formReturned.getContentPane().addPullToRefresh(() -> {
            /*
            for(int i=0; i<globalBase.getPosts("milton_academy").size(); i++)
            {
                tilesByOrg.remove(i);
                tilesButtons.remove(i);
                imagesArray.remove(i);
                tileUnselectedStyle.remove(i);

                tilesByOrg.add(globalBase.getPosts("milton_academy").get(i));
                tilesButtons.add(new Button(tilesByOrg.get(i).get("Title").toString()));
                imagesArray.add(globalBase.getImage(tilesByOrg.get(i).get("ImageURL").toString(), 100, 100));
                tileUnselectedStyle.add(new Style());

                tileUnselectedStyle.get(i).setBgImage(imagesArray.get(i));
                tileUnselectedStyle.get(i).setBorder(RoundRectBorder.create());
                tileUnselectedStyle.get(i).setMargin(1,1,1,1);

                tilesButtons.get(i).setUnselectedStyle(tileUnselectedStyle.get(i));
                String eventId= tilesByOrg.get(i).get("EventID").toString();

                tilesButtons.get(i).addActionListener(evt -> {
                    viewEvent(eventId);
                });


            }

            for(int i=tilesByOrg.size()-1; i>0; i--) {
                formReturned.add(tl.createConstraint().widthPercentage(50).heightPercentage(10), tilesButtons.get(i));
            }
        */
            formReturned.show();

        });





        return formReturned;
    }


    public Form profileForm()
    {

        Form formReturned = new Form("My Profile", new BoxLayout(BoxLayout.Y_AXIS));
        Container topBarInfo= new Container(new BoxLayout(BoxLayout.Y_AXIS));
        Container wholeContainer = new Container(new LayeredLayout());
        Style containerStyle = new Style();
        containerStyle.setBgColor(0xffffff);
        containerStyle.setMargin(0,0,0,0);
        wholeContainer.setUnselectedStyle(containerStyle);
        wholeContainer.setSelectedStyle(containerStyle);
        topBarInfo.setUnselectedStyle(containerStyle);
        wholeContainer.setWidth(displayWidth);
        wholeContainer.setHeight(displayHeight-formReturned.getToolbar().getHeight()-topBarInfo.getHeight());


        Tabs t = new Tabs();
        t.hideTabs();
        Style imageStyle= new Style();
        Map<String, Object> userData = globalBase.getUserByID(uniqueId).get(0);


        EncodedImage placeholder = EncodedImage.createFromImage(Image.createImage(displayWidth/4, displayHeight/4, 0xffff0000), true);
        URLImage background = URLImage.createToStorage(placeholder, "profImageUser.jpg", imageURL);
        background.fetch();



        imageStyle.setBorder(RoundBorder.create());
        imageStyle.setAlignment(Component.CENTER);
        imageStyle.setBgImage(background);
        Style nameStyle = new Style();
        Button imageLabel = new Button();
        imageLabel.setUnselectedStyle(imageStyle);
        imageLabel.setSelectedStyle(imageStyle);
        imageLabel.setPressedStyle(imageStyle);
        nameStyle.setAlignment(Component.CENTER);

        Label bio = new Label(userData.get("Bio").toString());
        Label organizations = new Label(userData.get("Organizations").toString());


        Label fullName = new Label(userData.get("Name").toString());
        fullName.setUnselectedStyle(nameStyle);

        TableLayout tl = new TableLayout(1, 2);
        Container eventsGoing = new Container(tl);
        ArrayList<Map<String, Object>> eventGoingData = new ArrayList<Map<String, Object>>();
        eventsGoing.setUnselectedStyle(containerStyle);


        for(String s: StringUtil.tokenize(userData.get("EventsGoing").toString(), ", "))
        {
            eventGoingData.add(globalBase.getEventById(s).get(0));
        }

        ArrayList<Image> imagesArray= new ArrayList<Image>();
        ArrayList<Button> tilesButtons = new ArrayList<Button>();

        for(int i=0; i<eventGoingData.size(); i++)
        {
            tileUnselectedStyle.add(new Style());
            imagesArray.add(globalBase.getImage(eventGoingData.get(i).get("ImageURL").toString(), 100, 100));
            tilesButtons.add(new Button(eventGoingData.get(i).get("Title").toString()));
        }
        for(int i=0; i<tilesButtons.size(); i++) {

            tileUnselectedStyle.get(i).setBgImage(imagesArray.get(i));
            tileUnselectedStyle.get(i).setBorder(RoundRectBorder.create());
            tileUnselectedStyle.get(i).setMargin(1,1,1,1);
            tilesButtons.get(i).setUnselectedStyle(tileUnselectedStyle.get(i));
            String eventID = eventGoingData.get(i).get("EventID").toString();
            tilesButtons.get(i).addActionListener(evt->{
                viewEvent(eventID).show();
            });

        }

       // eventsGoing.add(tl.createConstraint().widthPercentage(100).heightPercentage(5), new Label("Upcoming Events"));
        for(int i=eventGoingData.size()-1; i>=0; i--) {
            eventsGoing.add(tl.createConstraint().widthPercentage(50).heightPercentage(25), tilesButtons.get(i));
        }

///-----------------------------------------------------------------------------------------------------------------
        ArrayList<Map<String, Object>> eventData = new ArrayList<Map<String, Object>>();
        Container events = new Container(tl);
        events.setUnselectedStyle(containerStyle);

        for(String s: StringUtil.tokenize(userData.get("Events").toString(), ", "))
        {
            eventData.add(globalBase.getEventById(s).get(0));
            System.out.println("EVENT DATA IS: " + globalBase.getEventById(s).get(0));
        }

        ArrayList<Image> imagesArray1= new ArrayList<Image>();
        ArrayList<Button> tilesButtons1 = new ArrayList<Button>();

        for(int i=0; i<eventData.size(); i++)
        {
            tileUnselectedStyle.add(new Style());
            imagesArray1.add(globalBase.getImage(eventData.get(i).get("ImageURL").toString(), 100, 100));
            tilesButtons1.add(new Button(eventData.get(i).get("Title").toString()));
        }
        for(int i=0; i<tilesButtons1.size(); i++) {

            tileUnselectedStyle.get(i).setBgImage(imagesArray.get(i));
            tileUnselectedStyle.get(i).setBorder(RoundRectBorder.create());
            tileUnselectedStyle.get(i).setMargin(1,1,1,1);
            tilesButtons1.get(i).setUnselectedStyle(tileUnselectedStyle.get(i));
            String eventID = eventData.get(i).get("EventID").toString();
            tilesButtons1.get(i).addActionListener(evt->{
                viewEvent(eventID).show();
            });

        }

        //events.add(tl.createConstraint().widthPercentage(100).heightPercentage(5), new Label("Events"));
        for(int i=0; i<eventData.size(); i++) {
            System.out.println(eventData.get(i));
            events.add(tl.createConstraint().widthPercentage(50).heightPercentage(25), tilesButtons1.get(i));
        }








        Style sTyle = UIManager.getInstance().getComponentStyle("Button");
        FontImage radioEmptyImage = FontImage.createMaterial(FontImage.MATERIAL_RADIO_BUTTON_UNCHECKED, sTyle);
        FontImage radioFullImage = FontImage.createMaterial(FontImage.MATERIAL_RADIO_BUTTON_CHECKED, sTyle);
        ((DefaultLookAndFeel)UIManager.getInstance().getLookAndFeel()).setRadioButtonImages(radioFullImage, radioEmptyImage, radioFullImage, radioEmptyImage);


        t.addTab("Tab1", events);
        t.addTab("Tab2", eventsGoing);

        RadioButton firstTab = new RadioButton("");
        RadioButton secondTab = new RadioButton("");
     //   firstTab.setUIID("RadioButton");
     //   secondTab.setUIID("RadioButton");
        new ButtonGroup(firstTab, secondTab);
        firstTab.setSelected(true);
        Container tabsFlow = FlowLayout.encloseCenter(firstTab, secondTab);
        tabsFlow.setUnselectedStyle(containerStyle);


        wholeContainer.add(t);
        wholeContainer.add(BorderLayout.south(tabsFlow));
        Label labelle = new Label("Your Events");
        Label labelleGoing = new Label("Your Upcoming Events");
        wholeContainer.add(BorderLayout.north(labelleGoing));
        labelleGoing.isHidden();
        wholeContainer.add(BorderLayout.north(labelle));



        t.addSelectionListener((i1, i2) -> {
            switch(i2) {
                case 0:
                    if(!firstTab.isSelected()) {
                        firstTab.setSelected(true);

                    }
                    break;
                case 1:
                    if(!secondTab.isSelected()) {
                        secondTab.setSelected(true);


                    }
                    break;
            }
        });

        if(firstTab.isSelected())
        {
            wholeContainer.replace(labelleGoing, labelle, null);
        }
        else{
            wholeContainer.replace(labelle, labelleGoing, null);
        }

        topBarInfo.add(imageLabel);
        topBarInfo.add(fullName);

        formReturned.add(topBarInfo).add(wholeContainer);

        //TOOLBAR NAVIGATION
        formReturned.getToolbar().addMaterialCommandToLeftBar("" , FontImage.MATERIAL_EDIT, e-> {
            tileForm().show();
        });
        formReturned.getToolbar().addMaterialCommandToSideMenu("Home", FontImage.MATERIAL_HOME, e -> {
            tileForm().show();});
        formReturned.getToolbar().addMaterialCommandToSideMenu("Create", FontImage.MATERIAL_PLUS_ONE, e -> {
            addTile().show();});
        formReturned.getToolbar().addMaterialCommandToSideMenu("Settings", FontImage.MATERIAL_SETTINGS, e -> {showSettings();});
        formReturned.getToolbar().addMaterialCommandToSideMenu("My Profile", FontImage.MATERIAL_PERSON, e -> {formReturned.show();});
        formReturned.getToolbar().setUnselectedStyle(toolbarStyle);


        return formReturned;
    }



    void doLogin(Login lg, UserData data, boolean forceLogin) {
        if(!forceLogin) {
            if(lg.isUserLoggedIn()) {
                System.out.println("LOGIN SUCESSFUL");
                System.out.println("ID:"+ uniqueId);
                return;
            }


            // if the user already logged in previously and we have a token
            String t = Preferences.get(tokenPrefix + "token", (String)null);
            if(t != null) {
                // we check the expiration of the token which we previously stored as System time
                long tokenExpires = Preferences.get(tokenPrefix + "tokenExpires", (long)-1);
                if(tokenExpires < 0 || tokenExpires > System.currentTimeMillis()) {
                    // we are still logged in
                    System.out.println("We are still logged in");
                    tileForm().show();
                    System.out.println(imageURL);
                    return;
                }
            }
        }
        lg.setCallback(new LoginCallback() {
            @Override
            public void loginFailed(String errorMessage) {
                System.out.println("EROR YO");
                Dialog.show("Error Logging In", "There was an error logging in: " + errorMessage, "OK", null);
            }

            @Override
            public void loginSuccessful() {
                // when login is successful we fetch the full data
                data.fetchData(lg.getAccessToken().getToken(), ()-> {
                    // we store the values of result into local variables

                    uniqueId = data.getId();
                    fullName = data.getName();
                    imageURL = data.getImage();
                    System.out.println(imageURL);
                    getEmail = data.getEmail();
                    System.out.println(getEmail);


                    ArrayList<Map<String, Object>> dict = globalBase.getUsers();
                    ArrayList ids = new ArrayList<String>();
                    for(int i=0; i<dict.size(); i++)
                    {
                        ids.add(dict.get(i).get("Id").toString());
                    }

                        if (ids.contains(uniqueId)) {
                        System.out.println("THIS USER ALREADY EXISTS, YO!");
                        }
                        else{
                        Map<String, String> params = new HashMap<String, String>();
                        params.put("id", uniqueId);
                        params.put("name", fullName);
                        params.put("email", getEmail);
                        params.put("events", "");
                        params.put("eventsGoing", "");
                        params.put("bio", "");
                        params.put("imageURL", imageURL);
                        params.put("organizations", "");
                        globalBase.addUser(params);
                        }
                    // we then store the data into local cached storage so they will be around when we run the app next time
                    Preferences.set("fullName", fullName);
                    Preferences.set("uniqueId", uniqueId);
                    Preferences.set("imageURL", imageURL);
                    Preferences.set(tokenPrefix + "token", lg.getAccessToken().getToken());

                    // token expiration is in seconds from the current time, we convert it to a System.currentTimeMillis value so we can
                    // reference it in the future to check expiration
                    Preferences.set(tokenPrefix + "tokenExpires", tokenExpirationInMillis(lg.getAccessToken()));
                    System.out.println("wassup");

                    tileForm().show();
                });
            }
        });
        lg.doLogin();
    }



    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }



    //Create Login situtation
    long tokenExpirationInMillis(AccessToken token) {
        String expires = token.getExpires();
        if(expires != null && expires.length() > 0) {
            try {
                // when it will expire in seconds
                long l = (long)(Float.parseFloat(expires) * 1000);
                return System.currentTimeMillis() + l;
            } catch(NumberFormatException err) {
                // ignore invalid input
            }
        }
        return -1;
    }

    static interface UserData {
        public String getName();
        public String getEmail();
        public String getId();
        public String getImage();
        public void fetchData(String token, Runnable callback);
    }

    class GoogleData extends ConnectionRequest implements UserData {
        private Runnable callback;
        private Map<String, Object> parsedData;

        @Override
        public String getName() {
            return (String) parsedData.get("displayName");
        }


        public String getEmail() {
           String dataString = parsedData.get("emails").toString();
           return dataString.substring(8, dataString.indexOf(","));

        }

        @Override
        public String getId() {
            return parsedData.get("id").toString();
        }


        @Override
        public String getImage() {
            Map<String, Object> imageMeta = ((Map<String, Object>) parsedData.get("image"));
            return (String) imageMeta.get("url");
        }

        @Override
        public void fetchData(String token, Runnable callback) {
            this.callback = callback;
            addRequestHeader("Authorization", "Bearer " + token);
            setUrl("https://www.googleapis.com/plus/v1/people/me");
            setPost(false);
            NetworkManager.getInstance().addToQueue(this);

        }

        @Override
        protected void handleErrorResponseCode(int code, String message) {
            //access token not valid anymore
            if (code >= 400 && code <= 410) {
                doLogin(GoogleConnect.getInstance(), this, true);
                System.out.println("ERRORRRRRR");
                return;
            }
            super.handleErrorResponseCode(code, message);
            System.out.println("ERRORRRRR");
        }


        @Override
        protected void readResponse(InputStream input) throws IOException {
            JSONParser parser = new JSONParser();
            parsedData = parser.parseJSON(new InputStreamReader(input, "UTF-8"));
        }

        @Override
        protected void postResponse() {
            callback.run();
        }

        private String token;

    }

}
