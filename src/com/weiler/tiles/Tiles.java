package com.weiler.tiles;

import static com.codename1.ui.CN.*;

import com.codename1.io.*;
import com.codename1.social.LoginCallback;
import com.codename1.ui.*;
import com.codename1.ui.layouts.BorderLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import java.io.IOException;
import java.util.Map;
import java.io.InputStream;
import java.io.InputStreamReader;
import com.codename1.ui.layouts.GridLayout;
import com.codename1.social.GoogleConnect;
import com.codename1.ui.plaf.Style;
import com.cloudinary.Cloudinary;
import com.cloudinary.utils.ObjectUtils;
import com.codename1.charts.util.ColorUtil;
import com.codename1.ui.plaf.RoundBorder;
import com.codename1.ui.plaf.RoundRectBorder;
import com.codename1.ui.layouts.LayeredLayout;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.layouts.FlowLayout;





import com.codename1.social.Login;


/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class Tiles {

    private Form current;
    private Resources theme;
    private static String tokenPrefix="google";
    private Image milton;
    private String fullName;
    private String uniqueId;
    private String imageURL;
    private addEventForm form1 = new addEventForm();
    private Form createEvent;
    private DataBaseHelper globalBase = new DataBaseHelper();
    public Cloudinary cloudinary;
    public int displayWidth;
    public int displayHeight;


    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature
        Log.bindCrashProtection(true);

        //INITIALIZATION
        fullName = Preferences.get("fullName", null);
        uniqueId = Preferences.get("uniqueId", null);
        imageURL = Preferences.get("imageURL", null);

        //CLOUDINARY INIT
        cloudinary = new Cloudinary(ObjectUtils.asMap(
                "cloud_name", "tiles",
                "api_key", "817285289173163",
                "api_secret", "H9YMuHi-ZYdtLAMfyXpfbQFZ4OI"));

        // Disable private CDN URLs as this doesn't seem to work with free accounts
        cloudinary.config.privateCdn = false;

        displayWidth = Display.getInstance().getDisplayWidth();
        displayHeight = Display.getInstance().getDisplayHeight();


    }
    
    public void start() {
        if (current != null) {
            current.show();
            return;
        }

        Form hi = new Form("RoundRect", new BorderLayout(BorderLayout.CENTER_BEHAVIOR_CENTER));
        hi.getToolbar().setUIID("Container");

        Button ok = new Button("OK");
        Button cancel = new Button("Cancel");

        Label loginLabel = new Label("Login", "Container");
        loginLabel.getAllStyles().setAlignment(Component.CENTER);

        Label passwordLabel = new Label("Password", "Container");
        passwordLabel.getAllStyles().setAlignment(Component.CENTER);

        TextField login = new TextField("", "Login", 20, TextArea.ANY);
        TextField password = new TextField("", "Password", 20, TextArea.PASSWORD);
        Style loginStyle = login.getAllStyles();
        Stroke borderStroke = new Stroke(2, Stroke.CAP_SQUARE, Stroke.JOIN_MITER, 1);
        loginStyle.setBorder(RoundRectBorder.create().
                strokeColor(0).
                strokeOpacity(120).
                stroke(borderStroke));
        loginStyle.setBgColor(0xffffff);
        loginStyle.setBgTransparency(255);
        loginStyle.setMarginUnit(Style.UNIT_TYPE_DIPS);
        loginStyle.setMargin(Component.BOTTOM, 3);
        Style passwordStyle = password.getAllStyles();
        passwordStyle.setBorder(RoundRectBorder.create().
                strokeColor(0).
                strokeOpacity(120).
                stroke(borderStroke));
        passwordStyle.setBgColor(0xffffff);
        passwordStyle.setBgTransparency(255);


        Container box = BoxLayout.encloseY(
                loginLabel,
                login,
                passwordLabel,
                password,
                GridLayout.encloseIn(2, cancel, ok));

        Button closeButton = new Button();
        Style closeStyle = closeButton.getAllStyles();
        closeStyle.setFgColor(0xffffff);
        closeStyle.setBgTransparency(0);
        closeStyle.setPaddingUnit(Style.UNIT_TYPE_DIPS);
        closeStyle.setPadding(3, 3, 3, 3);
        closeStyle.setBorder(RoundBorder.create().shadowOpacity(100));
        FontImage.setMaterialIcon(closeButton, FontImage.MATERIAL_CLOSE);

        Container layers = LayeredLayout.encloseIn(box, FlowLayout.encloseRight(closeButton));
        Style boxStyle = box.getUnselectedStyle();
        boxStyle.setBgTransparency(255);
        boxStyle.setBgColor(0xeeeeee);
        boxStyle.setMarginUnit(Style.UNIT_TYPE_DIPS);
        boxStyle.setPaddingUnit(Style.UNIT_TYPE_DIPS);
        boxStyle.setMargin(4, 3, 3, 3);
        boxStyle.setPadding(2, 2, 2, 2);

        hi.add(BorderLayout.CENTER, layers);

        hi.show();
        //showLoginForm();
        System.out.println(globalBase.getPosts("milton_academy"));
        TileForm tileFormTool = new TileForm();
        addEventForm evtFormTool = new addEventForm();

        System.out.println("WIDTH= " + Display.getInstance().getDisplayWidth() + " HEIGHT= " +Display.getInstance().getDisplayHeight());
        createEvent = evtFormTool.newForm();
        //createEvent.show();
        //tileFormTool.formCreated().show();
        //showLoginForm();
    }

    private void showLoginForm() {
        Form loginForm = new Form();
        loginForm.getToolbar().hideToolbar();
        loginForm.add( new Component() {
            @Override
            public void paint(Graphics g) {
                // red color
                g.setColor(0x00ffff);
                // paint the screen in red
                g.fillRect(getX(), getY(), displayWidth, displayHeight);

                // draw hi world in white text at the top left corner of the screen
            }
        });



        Button loginWithGoogle = new Button("Signin with Google");
        loginWithGoogle.addActionListener((e) -> {
            tokenPrefix = "google";
            Login gc = GoogleConnect.getInstance();
            gc.setClientId("1063668062883-etbppkvqrepcavge8043lpqhhm1bs4bi.apps.googleusercontent.com");
            gc.setRedirectURI("http://www.codenameone.com/oauth2callback");
            gc.setClientSecret("iq6W5bQ8K6gYmpLwlNyutwuF");
           /* gc.setCallback(new LoginCallback() {
                public void loginSuccessful() {
                }

                public void loginFailed(String errorMessage) {System.out.println("THIS REALLY DIDN't WORK" + errorMessage);}
            });

            if(!gc.isUserLoggedIn()){
                gc.doLogin();
            }else{
                String token = gc.getAccessToken().getToken();
                createEvent.show();
            }*/
            doLogin(gc, new GoogleData(), false);
            System.out.println("114670128593389003041");
        });


        loginForm.show();
    }

    void doLogout(Login lg, UserData data, boolean forceLogout)
    {

    }

    void doLogin(Login lg, UserData data, boolean forceLogin) {
        if(!forceLogin) {
            if(lg.isUserLoggedIn()) {
                System.out.println("LOGIN SUCESSFUL");
                System.out.println("ID:"+ uniqueId);
                return;
            }

            // if the user already logged in previously and we have a token
            String t = Preferences.get(tokenPrefix + "token", (String)null);
            if(t != null) {
                // we check the expiration of the token which we previously stored as System time
                long tokenExpires = Preferences.get(tokenPrefix + "tokenExpires", (long)-1);
                if(tokenExpires < 0 || tokenExpires > System.currentTimeMillis()) {
                    // we are still logged in
                    System.out.println("We are still logged in");
                    createEvent.show();
                    return;
                }
            }
        }
        lg.setCallback(new LoginCallback() {
            @Override
            public void loginFailed(String errorMessage) {
                System.out.println("EROR YO");
                Dialog.show("Error Logging In", "There was an error logging in: " + errorMessage, "OK", null);
            }

            @Override
            public void loginSuccessful() {
                // when login is successful we fetch the full data
                data.fetchData(lg.getAccessToken().getToken(), ()-> {
                    // we store the values of result into local variables
                    uniqueId = data.getId();
                    System.out.println("ID: " + uniqueId);
                    fullName = data.getName();
                    imageURL = data.getImage();

                    // we then store the data into local cached storage so they will be around when we run the app next time
                    Preferences.set("fullName", fullName);
                    Preferences.set("uniqueId", uniqueId);
                    Preferences.set("imageURL", imageURL);
                    Preferences.set(tokenPrefix + "token", lg.getAccessToken().getToken());

                    // token expiration is in seconds from the current time, we convert it to a System.currentTimeMillis value so we can
                    // reference it in the future to check expiration
                    Preferences.set(tokenPrefix + "tokenExpires", tokenExpirationInMillis(lg.getAccessToken()));
                    System.out.println("wassup");
                    createEvent.show();
                });
            }
        });
        lg.doLogin();
    }



    public void stop() {
        current = getCurrentForm();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = getCurrentForm();
        }
    }
    
    public void destroy() {
    }



    //Create Login situtation
    long tokenExpirationInMillis(AccessToken token) {
        String expires = token.getExpires();
        if(expires != null && expires.length() > 0) {
            try {
                // when it will expire in seconds
                long l = (long)(Float.parseFloat(expires) * 1000);
                return System.currentTimeMillis() + l;
            } catch(NumberFormatException err) {
                // ignore invalid input
            }
        }
        return -1;
    }

    static interface UserData {
        public String getName();
        public String getId();
        public String getImage();
        public void fetchData(String token, Runnable callback);
    }

    class GoogleData extends ConnectionRequest implements UserData {
        private Runnable callback;
        private Map<String, Object> parsedData;

        @Override
        public String getName() {
            return (String) parsedData.get("displayName");
        }

        @Override
        public String getId() {
            return parsedData.get("id").toString();
        }

        @Override
        public String getImage() {
            Map<String, Object> imageMeta = ((Map<String, Object>) parsedData.get("image"));
            return (String) imageMeta.get("url");
        }

        @Override
        public void fetchData(String token, Runnable callback) {
            this.callback = callback;
            addRequestHeader("Authorization", "Bearer " + token);
            setUrl("https://www.googleapis.com/plus/v1/people/me");
            setPost(false);
            NetworkManager.getInstance().addToQueue(this);
        }

        @Override
        protected void handleErrorResponseCode(int code, String message) {
            //access token not valid anymore
            if (code >= 400 && code <= 410) {
                doLogin(GoogleConnect.getInstance(), this, true);
                System.out.println("ERRORRRRRR");
                return;
            }
            super.handleErrorResponseCode(code, message);
            System.out.println("ERRORRRRR");
        }


        @Override
        protected void readResponse(InputStream input) throws IOException {
            JSONParser parser = new JSONParser();
            parsedData = parser.parseJSON(new InputStreamReader(input, "UTF-8"));
        }

        @Override
        protected void postResponse() {
            callback.run();
        }

        private String token;

    }

}
